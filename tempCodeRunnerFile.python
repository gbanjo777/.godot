from datetime import datetime

# Banco de dados de bolos com sabores e pre√ßos
bolos = {
    "com cobertura": {
        "alias": ["com", "cobertura", "c", "cob"],
        "sabores": {
            "cenoura com cobertura": 20.00,
            "queijo com goiabada": 20.00,
            "chocolate com cobertura": 20.00,
            "aipim (encomenda)": 20.00,
            "red velvet": 20.00,
            "churros": 20.00,
            "caf√© (encomenda)": 20.00,
            "maracuj√°": 20.00,
            "queijo": 20.00,
            "beijinho": 20.00,
            "pa√ßoca": 20.00,
            "milho (encomenda)": 20.00,
            "banana (encomenda)": 20.00,
            "lim√£o": 20.00
        }
    },
    "sem cobertura": {
        "alias": ["sem", "sem cobertura", "s", "sc"],
        "sabores": {
            "fub√°": 14.00,
            "fub√° com coco": 14.00,
            "fub√° com erva doce": 14.00,
            "formigueiro": 14.00,
            "mesclado": 14.00,
            "coco": 14.00,
            "laranja": 14.00,
            "baunilha": 14.00,
            "chocolate": 14.00
        }
    },
    "tortas": {
        "alias": ["torta", "tortas", "sobremesa", "doces"],
        "sabores": {
            "morango": 30.00,
            "maracuj√°": 30.00,
            "chocolate": 30.00,
            "coco": 30.00,
            "lim√£o": 30.00
        }
    }
}
# Formas de pagamento e descontos/juros
pagamentos = {
    "pix": {
        "alias": ["pix", "px"],
        "desconto": 0.00
    },
    "d√©bito": {
        "alias": ["debito", "d√©bito", "db", "deb"],
        "desconto": 1.00
    },
    "cr√©dito": {
        "alias": ["credito", "cr√©dito", "ct", "cr"],
        "desconto": 1.00
    },
    "dinheiro": {
        "alias": ["dinheiro", "cash", "dn"],
        "desconto": 0.00
    },
    "parcelado": {
        "alias": [f"{i}x" for i in range(2, 25)],
        "desconto": -0.10  # 10% de juros
    }
}

# Boas-vindas e identifica√ß√£o
print("üßÅ Bem-vindo √† nossa loja de bolos!")
cliente = input("Digite o nome do cliente: ").strip().title()

# Exibir card√°pio
print("\nüìã Card√°pio:")
for tipo, dados in bolos.items():
    print(f"\n{tipo.capitalize()}:")
    for sabor, preco in dados["sabores"].items():
        print(f" - {sabor} (R$ {preco:.2f})")

# Iniciar pedido
pedidos = []

while True:
    tipo_bolo_input = input("\nQual tipo de bolo voc√™ deseja? (com cobertura / sem cobertura) ou 'fim': ").lower()
    if tipo_bolo_input == "fim":
        break

    tipo_valido = None
    for tipo, dados in bolos.items():
        if tipo_bolo_input in dados["alias"] or tipo_bolo_input == tipo:
            tipo_valido = tipo
            break

    if not tipo_valido:
        print("‚ùå Tipo de bolo inv√°lido. Tente novamente.")
        continue

    # Mostrar sabores dispon√≠veis
    print(f"\nSabores dispon√≠veis para {tipo_valido}:")
    for sabor, preco in bolos[tipo_valido]["sabores"].items():
        print(f" - {sabor} (R$ {preco:.2f})")

    sabor_input = input("Digite o sabor desejado: ").lower()
    if sabor_input not in bolos[tipo_valido]["sabores"]:
        print("‚ùå Sabor inv√°lido.")
        continue

    try:
        quantidade = int(input("Quantidade: "))
        if quantidade <= 0:
            print("‚ùå Quantidade inv√°lida.")
            continue
    except ValueError:
        print("‚ùå Digite um n√∫mero v√°lido.")
        continue

    preco_unit = bolos[tipo_valido]["sabores"][sabor_input]

    pedidos.append({
        "tipo": tipo_valido,
        "sabor": sabor_input,
        "quantidade": quantidade,
        "preco_unit": preco_unit
    })

# Se n√£o houver pedidos, encerrar
if not pedidos:
    print("\n‚ö†Ô∏è Nenhum pedido registrado.")
    exit()

# Escolher forma de pagamento
print("\nFormas de pagamento dispon√≠veis:")
print(" - Pix (sem desconto)")
print(" - D√©bito (10% desconto)")
print(" - Cr√©dito (10% desconto)")
print(" - Dinheiro (sem desconto)")
print(" - Parcelado de 2x at√© 24x (com 10% de juros)")

pagamento_input = input("\nEscolha a forma de pagamento: ").lower()
pagamento_valido = None
desconto = 0.0

for forma, dados in pagamentos.items():
    if pagamento_input in dados["alias"] or pagamento_input == forma:
        pagamento_valido = forma
        desconto = dados["desconto"]
        break

if not pagamento_valido:
    print("‚ùå Forma de pagamento inv√°lida.")
    exit()

# C√°lculo final
total = 0
print("\nüßæ RESUMO DO PEDIDO:")
for item in pedidos:
    subtotal = item["quantidade"] * item["preco_unit"]
    total += subtotal
    print(f"{item['quantidade']}x {item['sabor']} ({item['tipo']}) - R$ {subtotal:.2f}")

preco_final = total * (1 - desconto)

if desconto >= 0:
    print(f"\nüí∞ Desconto aplicado: {int(desconto * 100)}%")
else:
    print(f"\nüí∏ Juros aplicados: {int(-desconto * 100)}%")

print(f"üíµ Total final a pagar: R$ {preco_final:.2f}")

# Registrar no arquivo
data_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
with open("pedidos.txt", "a", encoding="utf-8") as arquivo:
    arquivo.write(f"\n[{data_hora}] Cliente: {cliente}\n")
    for item in pedidos:
        linha = f"- {item['quantidade']}x {item['sabor']} ({item['tipo']}) - R$ {item['preco_unit']:.2f}\n"
        arquivo.write(linha)
    arquivo.write(f"Forma de pagamento: {pagamento_valido}\n")
    arquivo.write(f"Total bruto: R$ {total:.2f} | Total final: R$ {preco_final:.2f}\n")
    arquivo.write("-" * 50 + "\n")

print("\n‚úÖ Pedido salvo com sucesso no arquivo 'pedidos.txt'!")